
# What additional architectural change can be made to reduce the internet facing attack surface of the web application instance.

Some already identified some of these but
- We could try ensuring the application uses SSL/TLS
- We can require all users who are accessing the Site need to log in with a tool like cognito
- We can build a CI/CD pipeline that has a few requirements
- - AMIs cannot be used unless they are from version control and code is scanned for vulnerabilities before being put into production

# Assuming the IAM permissions for the S3 bucket are still insecure, would creating VPC private endpoints for S3 prevent the unauthorized access to the secrets bucket.

As long as it is configured to only give access to the correct buckets only and are further restricted to require access points like the following  e.g.
"Condition": {
                "ArnNotLikeIfExists": {
                    "s3:DataAccessPointArn": "arn:aws:s3:us-east-1:<Account ID>:accesspoint/*"
                }

If this is done, then potentially yes, it can be secured that way. This is discussed in this recent AWS blog:
https://aws.amazon.com/blogs/storage/managing-amazon-s3-access-with-vpc-endpoints-and-s3-access-points/

# Will applying default encryption setting to the s3 buckets encrypt the data that already exists?

It will not. You will have to go in and enable encryption for those files. that are already in the bucket.

# What would happen if the original cloud formation templates are applied to this environment.

It depends on how the updates were performed.
If the updates to the environment were also made with CloudFormation, it will revet back to the original template configuration.

On the other hand, if the updates were made out of band (through their various consoles rather than cloud formation) unless a specific parameter
is overwritten in the original template OR the change set generated by cloud formation requires that the resource be redeployed, it will not touch
the changes that are made out of band.
One way to try and detect this sort of change is to use CloudFormation to try and detect drift but I found this to be spotty.
For example, it did not detect an out of band change I made to add a permission boundary to the IAM Role. It does however detect some other changes (like tags)
